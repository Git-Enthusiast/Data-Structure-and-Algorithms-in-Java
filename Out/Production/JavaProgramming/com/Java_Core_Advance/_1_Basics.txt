Primary/Main Features of Java
1. Platform Independent: Compiler converts source code to bytecode and then the JVM executes the bytecode generated by
the compiler. This bytecode can run on any platform be it Windows, Linux, or macOS which means if we compile a program
on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output
produced by all the OS is the same after the execution of the bytecode. That is why we call java a platform-independent
language.

2. Object-Oriented Programming Language: Organizing the program in the terms of a collection of objects is a way of
object-oriented programming, each of which represents an instance of the class.

The four main concepts of Object-Oriented programming are:

Abstraction
Encapsulation
Inheritance
Polymorphism

3. Simple:  Java is one of the simple languages as it does not have complex features like pointers, operator overloading,
 multiple inheritances, and Explicit memory allocation.

4. Robust:  Java language is robust which means reliable. It is developed in such a way that it puts a lot of effort into
 checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to
  detect by another programming language. The main features of java that make it robust are garbage collection, Exception
  Handling, and memory allocation.

5. Secure:  In java, we don’t have pointers, so we cannot access out-of-bound arrays i.e it shows ArrayIndexOutOfBound
 Exception if we try to do so. That’s why several security flaws like stack corruption or buffer overflow are impossible to
  exploit in Java. Also, java programs run in an environment that is independent of the os(operating system) environment
  which makes java programs more secure.

6. Distributed:  We can create distributed applications using the java programming language. Remote Method Invocation and
Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on
 one or more systems that are connected to each other through an internet connection.

7. Multithreading:  Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts
of a program for maximum utilization of the CPU.

8. Portable:  As we know, java code written on one machine can be run on another machine. The platform-independent feature
 of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable.

9. High Performance: Java architecture is defined in such a way that it reduces overhead during the runtime and at some
times java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basics where it only compiles those
methods that are called making applications to execute faster.

10. Dynamic flexibility: Java being completely object-oriented gives us the flexibility to add classes,  new methods to
 existing
 classes, and even create new classes through sub-classes. Java even supports functions written in other languages such
  as C, C++ which are referred to as native methods.

11. Sandbox Execution: Java programs run in a separate space that allows user to execute their applications without
affecting the underlying system with help of a bytecode verifier. Bytecode verifier also provides additional security
as its role is to check the code for any violation of access.

12. Write Once Run Anywhere: As discussed above java application generates a ‘.class’ file that corresponds to our
applications(program) but contains code in binary format. It provides ease t architecture-neutral ease as bytecode
 is not dependent on any machine architecture. It is the primary reason java is used in the enterprising IT industry
 globally worldwide.

13. Power of compilation and interpretation: Most languages are designed with the purpose of either they are compiled
language or they are interpreted language. But java integrates arising enormous power as Java compiler compiles the
source code to bytecode and JVM  executes this bytecode to machine OS-dependent executable code.



class : class keyword is used to declare classes in Java
public : It is an access specifier. Public means this function is visible to all.
static : static is again a keyword used to make a function static. To execute a static function you do not have to
create an Object of the class. The main() method here is called by JVM, without creating any object for class.
void : It is the return type, meaning this function will not return anything.
main : main() method is the most important method in a Java program. This is the method which is executed, hence all
the logic must be inside the main() method. If a java class is not having a main() method, it causes compilation error.
String[] args : This is used to signify that the user may opt to enter parameters to the Java Program at command line.
 We can use both String[] args or String args[]. Java compiler would accept both forms.
System.out.println : This is used to print anything on the console like “printf” in C language.